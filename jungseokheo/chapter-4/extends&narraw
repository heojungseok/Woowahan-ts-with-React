# Q1. 타입 확장하기에서 유니온 타입과 교차타입을 설명하는데 값을 기준으로 한다는 말이 뭐야? 수학적인 개념과는 반대인거야?

값 집합 관점에서 이해하기
1. 유니온 타입 (A | B)

가능한 값들이 더 많아짐 (집합의 합집합)
A 타입의 값 또는 B 타입의 값을 가질 수 있음
값의 선택지가 확장됨

```ts
typescripttype A = { name: string };
type B = { age: number };
type Union = A | B;

// 가능한 값들:
const u1: Union = { name: "Alice" }; // A만
const u2: Union = { age: 25 }; // B만
const u3: Union = { name: "Bob", age: 30 }; // 둘 다도 가능
```

2. 교차 타입 (A & B)

모든 속성을 만족해야 함 (집합의 교집합)
A 타입의 요구사항 그리고 B 타입의 요구사항을 모두 충족
더 엄격한 조건

```ts
typescripttype A = { name: string };
type B = { age: number };
type Intersection = A & B;

// 반드시 둘 다 필요:
const i: Intersection = { name: "Alice", age: 25 }; // OK
// const i2: Intersection = { name: "Bob" }; // Error!
```

왜 반대처럼 느껴질까?
수학에서 ∪(합집합)는 더 커지고, ∩(교집합)는 더 작아지죠. 타입스크립트도 값의 개수로 보면 동일합니다. 
하지만 기호(|, &)와 타입의 엄격함을 기준으로 생각하면 헷갈릴 수 있어요

| (유니온): 느슨함, 선택지가 많음
& (교차): 엄격함, 모든 조건을 만족해야 함
